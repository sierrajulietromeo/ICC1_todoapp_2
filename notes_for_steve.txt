To migrate from SQLite to Azure SQL Database, you need to:

1. **Install the required package**:  
   Use `pyodbc` to connect to Azure SQL.  
   ```sh
   pip install pyodbc
   ```

2. **Update your connection logic**:  
   Replace `sqlite3` with `pyodbc` and use your Azure SQL connection string.

3. **Update SQL syntax**:  
   Azure SQL uses `IDENTITY(1,1)` for auto-incrementing primary keys, and `?` placeholders are replaced with `?` in `pyodbc` (same as SQLite).

Hereâ€™s how you can update your app.py:

````python
from flask import Flask, request, render_template, redirect, url_for
import pyodbc

app = Flask(__name__)

# Azure SQL connection string
AZURE_SQL_CONN_STR = (
    "DRIVER={ODBC Driver 18 for SQL Server};"
    "SERVER=<your_server>.database.windows.net;"
    "DATABASE=<your_database>;"
    "UID=<your_username>;"
    "PWD=<your_password>;"
    "Encrypt=yes;"
    "TrustServerCertificate=no;"
    "Connection Timeout=30;"
)

# Initialise the database
def init_db():
    conn = pyodbc.connect(AZURE_SQL_CONN_STR)
    cur = conn.cursor()
    cur.execute('''
        IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='tasks' AND xtype='U')
        CREATE TABLE tasks (
            id INT IDENTITY(1,1) PRIMARY KEY, 
            task NVARCHAR(255) NOT NULL,
            priority INT DEFAULT 1
        )
    ''')
    conn.commit()
    conn.close()

init_db()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/tasks')
def tasks():
    conn = pyodbc.connect(AZURE_SQL_CONN_STR)
    cur = conn.cursor()
    cur.execute('SELECT * FROM tasks ORDER BY priority ASC')
    tasks = cur.fetchall()
    conn.close()
    return render_template('tasks.html', tasks=tasks)

@app.route('/add', methods=['POST'])
def add_task():
    new_task = request.form.get('task')
    priority = request.form.get('priority')
    conn = pyodbc.connect(AZURE_SQL_CONN_STR)
    cur = conn.cursor()
    cur.execute('INSERT INTO tasks (task, priority) VALUES (?, ?)', (new_task, priority))
    conn.commit()
    conn.close()
    return redirect(url_for('tasks'))

@app.route('/delete/<int:task_id>', methods=['POST'])
def delete_task(task_id):
    conn = pyodbc.connect(AZURE_SQL_CONN_STR)
    cur = conn.cursor()
    cur.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()
    return redirect(url_for('tasks'))

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=80)
````

**Replace** `<your_server>`, `<your_database>`, `<your_username>`, and `<your_password>` with your Azure SQL details.

**Note:**  
- You may need to install the ODBC driver on your system.  
- For production, use environment variables for credentials.  
- The table creation uses T-SQL syntax for Azure SQL.

Let me know if you need help with the connection string or driver installation!